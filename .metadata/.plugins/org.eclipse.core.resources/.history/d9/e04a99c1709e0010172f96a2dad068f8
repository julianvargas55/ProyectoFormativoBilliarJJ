package sena.jj.com.service;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate; // ¡NUEVA IMPORTACIÓN!
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.Map;

@Service
public class PedidoService {

    @Autowired
    private JdbcTemplate jdbcTemplate; // Inyecta la herramienta para ejecutar SQL

    @Transactional
    public void procesarYGuardar(List<Map<String, Object>> productos) {
        
        // 1. Calcular el Total
        double totalCalculado = productos.stream()
            .mapToDouble(p -> (double) p.get("precio"))
            .sum();
            
        // 2. GUARDAR EL ENCABEZADO DEL PEDIDO Y OBTENER EL ID
        String sqlPedido = "INSERT INTO pedidos (fecha_pedido, total) VALUES (NOW(), ?)";
        
        // Usa update() para insertar y obtener el número de filas afectadas. 
        // Para obtener el ID, la implementación real es más compleja (usando KeyHolder), 
        // pero aquí insertaremos primero y luego el detalle.
        jdbcTemplate.update(sqlPedido, totalCalculado); 
        
        // **ESTO ES UN EJEMPLO SIMPLE.** Necesitarías una consulta más avanzada para obtener el ID 
        // del pedido recién insertado para el detalle (ej: SELECT LAST_INSERT_ID()).
        
        // Suponiendo que obtienes el ID (ej: Long pedidoId = ... )
        
        // 3. GUARDAR LOS DETALLES
        String sqlDetalle = "INSERT INTO detalle_pedido (pedido_id, nombre_producto, precio_unitario, cantidad) VALUES (?, ?, ?, 1)";

        Long pedidoIdFicticio = 1L; // **Esto debe ser el ID real del pedido guardado**
        
        for (Map<String, Object> producto : productos) {
            jdbcTemplate.update(
                sqlDetalle, 
                pedidoIdFicticio, // Reemplazar por el ID real
                (String) producto.get("nombre"),
                (double) producto.get("precio")
            );
        }
    }
}