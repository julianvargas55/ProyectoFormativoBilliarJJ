package sena.jj.com.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import jakarta.servlet.http.HttpSession;
import sena.jj.com.model.Usuario;
import sena.jj.com.model.Pedido;
import sena.jj.com.service.IUsuarioService;
import sena.jj.com.service.PedidoService;

import java.util.ArrayList;
import java.util.List;

@Controller
@RequestMapping("/administrador")
public class AdministradorController {

    @Autowired
    private IUsuarioService usuarioService;
    
    @Autowired
    private PedidoService pedidoService;

    @GetMapping
    public String dashboard(HttpSession session, Model model) {
        Usuario usuario = (Usuario) session.getAttribute("usuario");
        
        // Validar por rol "1"
        if (usuario == null || !"1".equals(usuario.getRol())) {
            return "redirect:/";
        }
        
        try {
            // Cargar usuarios
            List<Usuario> usuarios = usuarioService.findAll();
            model.addAttribute("usuarios", usuarios);
            model.addAttribute("usuario", usuario);
            
            // NUEVO: Cargar todos los pedidos reales de la base de datos
            List<Pedido> todosLosPedidos = pedidoService.findAll();
            model.addAttribute("pedidos", todosLosPedidos);
            
            // Calcular estadísticas reales
            calcularEstadisticas(model, todosLosPedidos);
            
        } catch (Exception e) {
            model.addAttribute("error", "Error al cargar datos: " + e.getMessage());
            // Asegurar que pedidos esté inicializado incluso con error
            model.addAttribute("pedidos", new ArrayList<>());
        }
        
        return "administrador/administrador";
    }
    
    // Método para calcular estadísticas reales
    private void calcularEstadisticas(Model model, List<Pedido> pedidos) {
        try {
            // Calcular ingresos del día
            Double ingresosDia = pedidos.stream()
                .filter(p -> p.getFechaCreacion().toLocalDate().equals(java.time.LocalDate.now()))
                .mapToDouble(Pedido::getTotal)
                .sum();
            
            // Contar pedidos del día
            long pedidosDia = pedidos.stream()
                .filter(p -> p.getFechaCreacion().toLocalDate().equals(java.time.LocalDate.now()))
                .count();
            
            // Contar facturas pendientes
            long facturasPendientes = pedidos.stream()
                .filter(p -> "PENDIENTE".equals(p.getEstado()))
                .count();
            
            // Estimar mesas activas (simplificado)
            int mesasActivas = Math.min((int) pedidosDia, 6); // Máximo 6 mesas
            
            model.addAttribute("ingresosDia", String.format("%.0f", ingresosDia));
            model.addAttribute("pedidosDia", pedidosDia);
            model.addAttribute("facturasPendientes", facturasPendientes);
            model.addAttribute("mesasActivas", mesasActivas);
            
        } catch (Exception e) {
            // Valores por defecto en caso de error
            model.addAttribute("ingresosDia", "0");
            model.addAttribute("pedidosDia", "0");
            model.addAttribute("facturasPendientes", "0");
            model.addAttribute("mesasActivas", "0");
        }
    }
    
    // Endpoint para completar pedidos
    @PostMapping("/completar-pedido/{pedidoId}")
    public String completarPedido(@PathVariable Integer pedidoId, HttpSession session) {
        Usuario usuario = (Usuario) session.getAttribute("usuario");
        
        // Validar que sea administrador
        if (usuario == null || !"1".equals(usuario.getRol())) {
            return "redirect:/";
        }
        
        try {
            // Buscar el pedido por ID
            Pedido pedido = pedidoService.findById(pedidoId);
            
            if (pedido != null) {
                pedido.setEstado("COMPLETADO");
                pedidoService.guardarPedido(pedido);
            }
            
        } catch (Exception e) {
            System.err.println("Error completando pedido: " + e.getMessage());
        }
        
        return "redirect:/administrador";
    }
}